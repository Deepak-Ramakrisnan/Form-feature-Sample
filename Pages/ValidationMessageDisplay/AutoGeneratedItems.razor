@page "/Message/default"


@using Syncfusion.Blazor.Form
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.DropDowns

<PageTitle>SfDataForm component</PageTitle>

<h3>Auto Generated fields - All fields</h3>

<SfDataForm ID="MyForm"
            Model="@exampleModel"
            Width="50%"
            Columns=1
            EnableRtl="true"
            ColumnSpacing="20px"
            LabelPosition="Labelposition"
            ButtonsAlignment="Buttonsalignment"
            ValidationMessageDisplay="@Validation" OnSubmit="HandleFormSubmit" OnUpdate="FormUpdate">
    <FormValidation>
        <DataAnnotationsValidator></DataAnnotationsValidator>
        @*<ValidationSummary></ValidationSummary>*@
    </FormValidation>
    <FormItems>
        <FormAutoGeneratedItems></FormAutoGeneratedItems>
    </FormItems>

    <FormButtons>
        <SfButton>Submit</SfButton>
    </FormButtons>

</SfDataForm>

<div id="PropertyPanel">
    <label>Button Position</label>
    <SfDropDownList TValue="FormButtonsAlignment" TItem="string" @bind-Value="@Buttonsalignment" DataSource="ButtonAlignment"></SfDropDownList>
    <label>Label Position</label>
    <SfDropDownList TValue="FormLabelPosition" TItem="string" @bind-Value="@Labelposition" DataSource="LabelPosition"></SfDropDownList>
</div>

@code {

    FormButtonsAlignment Buttonsalignment = FormButtonsAlignment.Right;
    FormLabelPosition Labelposition = FormLabelPosition.Top;
    string[] LabelPosition = Enum.GetNames(typeof(FormLabelPosition));
    string[] ButtonAlignment = Enum.GetNames(typeof(FormButtonsAlignment));

    private void FormUpdate(FormUpdateEventArgs args)
    {

    }

    private async Task HandleFormSubmit(EditContext editContext)
    {
        bool isFormValid = editContext.Validate();

        if (isFormValid)
        {
            //apply some custom logic when the form is valud
        }
        else
        {
            //apply some custom logic when the form is not valid
        }
    }
    public string Text1 { get; set; } = "string";
    public void RenderDay(RenderDayCellEventArgs ars)
    {

    }
    SfDataForm? validate;

    FormValidationMessageDisplay Validation { get; set; } = FormValidationMessageDisplay.Inline;

    public void ChangeProperty()
    {
        Validation = FormValidationMessageDisplay.Inline;

    }

    public void ChangePropertyInline()
    {
        Validation = FormValidationMessageDisplay.Tooltip;
    }

    EditContext myEditContext { get; set; }

    protected override void OnInitialized()
    {
        myEditContext = new EditContext(exampleModel);
        base.OnInitialized();
    }

    public class ExampleModel
    {

        [Required(ErrorMessage = "Enter FirstName here")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Enter LastName here")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Enter Count here")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Enter Count here")]
        [Display(Name = "Confirm Password")]
        public string ConfirmPassword { get; set; }


        [Required(ErrorMessage = "Enter Email here")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Enter Date here")]
        [Display(Name = "Date Of Birth")]
        public DateTime? Date { get; set; }

        [Required(ErrorMessage = "You need to agree to the Terms and Conditions")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You need to agree to the Terms and Conditions")]
        public bool Accept { get; set; }
    }

    private ExampleModel exampleModel = new ExampleModel();


    public class ExampleModel1
    {

        [Required(ErrorMessage = "Enter FirstName here")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Enter LastName here")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Enter Count here")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Enter Count here")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "Enter Email here")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Enter Date here")]
        public DateTime? Date1 { get; set; }

        [Required(ErrorMessage = "You need to agree to the Terms and Conditions")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You need to agree to the Terms and Conditions")]
        public bool Accept { get; set; }
    }

    private ExampleModel1 exampleModel1 = new ExampleModel1();
}