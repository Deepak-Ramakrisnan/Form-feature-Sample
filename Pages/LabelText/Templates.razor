@page "/labeltext/template"

@using Syncfusion.Blazor.Form
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Popups

<PageTitle>SfDataForm component</PageTitle>

<h3>Template</h3>

<SfDataForm ID="MyForm"
        Model="@exampleModel"
        Width="50%"
        Columns=1
        ColumnSpacing="20px"
        LabelPosition="FormLabelPosition.Left"
        ButtonsAlignment="FormButtonsAlignment.Center"
        ValidationMessageDisplay="@Validation" OnSubmit="HandleFormSubmit" OnUpdate="FormUpdate">
    <FormValidation>
        <DataAnnotationsValidator></DataAnnotationsValidator>
        @*<ValidationSummary></ValidationSummary>*@
    </FormValidation>
    <FormItems>
        <FormItem Field="@nameof(exampleModel.FirstName)" LabelText="test-lable" Placeholder="test-placeholder">
            <Template>
                <div>
                    <label>First Name</label>
                    <SfTextBox ></SfTextBox>
                </div>
            </Template>
        </FormItem>
        <FormItem Field="@nameof(exampleModel.LastName)" LabelText="test-lable" Placeholder="test-placeholder">
             <Template>
            <div>
                <label>Last Name</label>
                <SfTextBox Placeholder="Testing Template" FloatLabelType="FloatLabelType.Always"></SfTextBox>
            </div>
            </Template>
        </FormItem>
    </FormItems>

    <FormButtons>
        <SfButton>Submit</SfButton>
    </FormButtons>

</SfDataForm>

@code {

    private void FormUpdate(FormUpdateEventArgs args)
    {

    }

    private async Task HandleFormSubmit(EditContext editContext)
    {
        bool isFormValid = editContext.Validate();

        if (isFormValid)
        {
            //apply some custom logic when the form is valud
        }
        else
        {
            //apply some custom logic when the form is not valid
        }
    }

    public string[] data = new string[] { "Male", "Female", "Others" };

    SfDataForm? validate;

    FormValidationMessageDisplay Validation { get; set; } = FormValidationMessageDisplay.Inline;

    public void ChangeProperty()
    {
        Validation = FormValidationMessageDisplay.Inline;

    }

    public void ChangePropertyInline()
    {
        Validation = FormValidationMessageDisplay.Tooltip;
    }

    EditContext myEditContext { get; set; }

    protected override void OnInitialized()
    {
        myEditContext = new EditContext(exampleModel);
        base.OnInitialized();
    }

    public class ExampleModel
    {
        [Required(ErrorMessage = "Enter FirstName here")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Enter LastName here")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Enter Password here")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Enter Confirm Password here")]
        public string ConfirmPassword { get; set; }

        [Required(ErrorMessage = "Enter E-mail here")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Enter Address Line 1 here")]
        public string Address1 { get; set; }

        public string Address2 { get; set; }

        [Required(ErrorMessage = "Enter Date here")]
        public DateTime? Date1 { get; set; }

        [Required(ErrorMessage = "You need to choose the gender")]
        public string Sex { get; set; }

        [Required(ErrorMessage = "You must agree to the Terms and Conditions")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the Terms and Conditions")]
        public bool Accept { get; set; }
    }
    private ExampleModel exampleModel = new ExampleModel();
}